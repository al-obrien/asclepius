% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s4_fit.R
\name{loss_func}
\alias{loss_func}
\title{Loss function for parameter estimation}
\usage{
loss_func(
  params,
  constants = NULL,
  data,
  Disease = NULL,
  Population = NULL,
  times,
  transition_model,
  loss_function = "rmse",
  target = "infected_new",
  rescale = "maxmin",
  ...
)
}
\arguments{
\item{params}{Parameters to optimize over.}

\item{data}{Vector of values to calculate loss based on output of the disease simulation of the `target` state (e.g. infected_new).}

\item{constant}{Values that should remain constant during loss calculation and following optimization.}
}
\description{
Helper function to take a set of parameters, constants, and incorporate them dynamically into
disease simulation based upon the transition model. Estimation is based upon a particular target state and
the data vector to match the trajectory to. This can be useful in conjunction with optimization algorithms suitable
for bounded integers such as select routines in `optim()`.
}
\details{
Constant values provided will be filled into the params vector. This will determine which values one wants to optimize.
}
\examples{
\dontrun{
# Create a sample population
sim_pop <- create_population(1000)
sim_pop <- set_age(sim_pop, range = c(1:100))
sim_pop <- set_gender(sim_pop, range = c('M','F'))
sim_pop <- set_contacts(pop_obj = sim_pop, range = c(1,10), vars = c('age_structure', 'gender_structure'), mu = 0.33, variance = .001)

data(ab_covid)
loss_func(c(3, 0.25, 10, 3, 15),
          Population = sim_pop,
          data = ab_covid$Number.of.cases,
          times = 50,
          transition_model = 'SEIR')

# Terrible grid search
samplegrid <- expand.grid(seq(1:5), seq(.05, 0.5,.05), 3:15, 2:5, 5:15)
samplegrid <- samplegrid[sample(1:nrow(samplegrid), 500, replace = FALSE),]
model_fits <- apply(samplegrid, MARGIN = 1, simplify = T,
                    FUN = function(x) {loss_func(x,
                                                 Population = sim_pop,
                                                 data = ab_covid$Number.of.cases,
                                                 times = 50,
                                                 transition_model = 'SEIR')})

# Run terrible grid search in parallel
library(parallel)
core_n <- detectCores()
cl <- makeCluster(core_n-1)
clusterExport(cl, 'samplegrid')
clusterExport(cl, 'sim_pop')
clusterEvalQ(cl, {library(asclepius)})
model_fits <- parApply(cl, samplegrid, MARGIN = 1,
                       FUN = function(x) {loss_func(x,
                                                    Population = sim_pop,
                                                    data = ab_covid$Number.of.cases,
                                                    times = 50, transition_model = 'SEIR')})
#samplegrid[which(rownames(samplegrid) == names(model_fits[which.min(model_fits )])),]

}
}
